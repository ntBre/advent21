#+title: Advent of Code 2021

My solutions to the [[https://adventofcode.com/][Advent of Code]] puzzles for 2021.

* Day 1
  For part 1, just save the last element and check if the new one is
  greater than the last. If so, increment the count:

  #+begin_src lisp
    (defun count-increases (lst)
      (let ((last (car lst))
	    (count 0))
	(loop for l in lst
	      do (when (> l last)
		   (incf count))
		 (setf last l))
	count))
  #+end_src

  Since I initialize =last= to =(car lst)= I guess I should start the
  loop on =(cdr lst)= to save one iteration.

  For part 2, I reused the same =count-increases= function after doing
  one loop over the list and computing rolling sums of the last 3
  elements:

  #+begin_src lisp
    (defun three-buf (lst)
      (loop for i = 0 then (1+ i)
	    while (< i (- (length lst) 2))
	    collect (+ (elt lst i)
		       (elt lst (+ 1 i))
		       (elt lst (+ 2 i)))))
  #+end_src

  As usual, I had an off-by-one error in the first iteration where I
  subtracted 3 in the while portion instead of 2, but I caught it by
  comparing to the number of 3-element windows the example was
  supposed to have.

  It would be more efficient to combine these loops instead of doing
  them in two phases, but doing it this way let me reuse the
  =count-increases= function I already wrote (and tested) from the
  first part.

** Revision
   After seeing some of the solutions online, I rewrote my answer in a
   more functional form by using some zipping and filtering in
   =count-increases=.

   #+begin_src lisp
     (defun count-increases (lst)
       (length
	(remove-if-not
	 #'(lambda (x) (> (cadr x) (car x)))
	 (mapcar #'list lst (cdr lst)))))
   #+end_src

   For the second part, you can first "zip" the triples together with
   =+= and then use the results in =count-increases= much like in my
   original solution.

   #+begin_src lisp
     (defun part-2 ()
       (let ((input (load-input "input.txt")))
	 (count-increases
	  (mapcar #'+ input
		  (cdr input)
		  (cddr input)))))
   #+end_src

   Obviously this is quite similar to my original solution overall
   with the double loops, but now the two loops are implicitly
   contained in the =mapcar= calls instead of explicitly using =loop=.

* Day 2
  Today I just wrote everything at the top level of the file and it
  paid off smoothly. This is the solution to the second part, but the
  difference from the first part is only inside the =ecase= cases (and
  the addition of =a=, the aim) where I had to update the
  interpretation of the commands from the input.

  Today I learned that =ecase= does not work with string keys, which
  actually made it a bit easier since I could =mapcar= over the split
  line instead of only using =read-from-string= on the cadr of the
  line. Reading the strings from the string yields symbols with the
  same name so I can use symbols as the keys in the =ecase=. You also
  don't quote the symbols when using them as keys.

  #+begin_src lisp
    (let ((h 0)
	  (d 0)
	  (a 0))
      (with-open-file (in "input.txt" :direction :input)
	(loop for line = (read-line in nil nil)
	      while line
	      do (destructuring-bind (dir dist)
		     (mapcar #'read-from-string (uiop:split-string line))
		   (ecase dir
		     (forward
		      (incf h dist)
		      (incf d (* a dist)))
		     (down
		      (incf a dist))
		     (up
		      (decf a dist)))))
	(print (* h d))))
  #+end_src

* Day 3
  That was a tough one. Definitely a substantial increase in
  difficulty from the first two days I think. I'll have to try to come
  up with a better solution later, but at least I got it to work after
  about two hours. I think using arrays in Common Lisp was not a good
  idea. It's a real pain not being able to grab a row with something
  like =(aref arr 0)= if the array has more than one dimension. I
  probably should have stuck with lists in the second part like I did
  in the first part. Part 1 wasn't too bad:

  #+begin_src lisp
    (defun mask (counts)
      (map 'list #'(lambda (x)
		  (if (< x 0)
		      0
		      1))
	      counts))

    (defun to-bin (lst)
      (let ((ret 0)
	    (len (length lst)))
	(loop for i = 0 then (1+ i)
	      and l in lst
	      do (setf ret
		       (logior ret
			       (ash l (- len i 1)))))
	ret))

    (defun part1 ()
      (let* ((input (parse "inp.txt"))
	     (len (length (car input)))
	     (counts (make-array len)))
	(dolist (num input)
	  (loop for c across num
		and i = 0 then (1+ i)
		do (ecase c
		     (#\0
		      (decf (aref counts i)))
		     (#\1
		      (incf (aref counts i))))))
	;; count > 0 => 1; < 0 => 0
	(let* ((gam (to-bin (mask counts)))
	       ;; now it works for both example and input
	       (eps (logxor gam (ash #b111111111111
				     (- (length counts) 12)))))
	  (* gam eps))))
  #+end_src

  I just left the values as strings and looped across them, extracting
  individual chars. I incremented/decremented values in a result
  vector depending on whether the char is a 1 or 0, which lets me find
  the most common value in each position. I don't think I'm using
  "mask" correctly, but it converts a list of those counts such as =(2
  -2 4 2 -2)= to 1s and 0s like =(1 0 1 1 0)=. That's basically the
  answer for the gamma rate, so =to-bin= just converts that list to a
  binary number. I thought taking the complement of that would give
  the epsilon rate, but I think Common Lisp does two's complement
  instead one's complement like I wanted. As a result, I had to XOR
  the =to-bin= output with a bit vector of 1s.

  My Part 2 feels like a bit of a disaster because of all the array
  helper functions I had to write, but I guess the core logic isn't so
  bad.

  #+begin_src lisp
    (defun o2-rating (filename)
      (let ((inp (load-array (parse filename))))
	(loop while (> (nrows inp) 1)
	      for i from 0 below (ncols inp)
	      for col = (column inp i)
	      for mc = (most-common col)
	      do (setf inp (del-rows
			    #'(lambda (row) (/= (nth i row) mc))
			    inp)))
		 (to-bin (row inp 0))))
  #+end_src

  After loading the input as a bit array, I just loop over the columns
  (while there is more than one row left), find the =most-common=
  element in the column, and delete the rows where the most common
  element isn't found. Finally, convert the remaining row to a binary
  number just like before. Now that I think about it, this is a pretty
  clean translation of the problem logic into Lisp, but as you can see
  if you open the full code, the helper functions take up most of the
  space.

* Day 4
  After swearing off arrays yesterday, I got pulled back to them
  today. However, with the =row= and =col= accessors I wrote
  yesterday, it was already a bit easier, and the static dimensions of
  the bingo boards made it easier still. I chose to use negative
  numbers to represent the numbers that had already been called. This
  meant I was terrified to notice that 0 was a viable bingo number and
  that Common Lisp doesn't have negative zero, but fortunately that
  didn't affect the outcome of either part, at least for my input. Now
  that I think about it, just setting the called number to a single
  negative value instead of negating the value that was already there
  would fix this problem.

  I don't have much else to say about the code, so I won't paste any
  of it here. These past two days have been noticeably harder than the
  first two, but after finishing them, the solutions still follow very
  clearly from the problem statement. The only real challenge has been
  deciding how to represent the data. I made a poor choice yesterday,
  which really slowed me down. Today a similar choice worked out much
  better. It's really nice to see the solution being almost readable
  in English from the code once I take care of the
  representation. That's a bit more apparent in yesterday's solution
  than today's, but both are applicable. Maybe I should try writing
  the high-level solution first and then implementing it, in true
  "wishful thinking" style from [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][SICP]].

* Day 5
  Today I used arrays again. Obviously I was being a bit hyperbolic
  yesterday when I said I swore off arrays. After the pain of day 3, I
  just realized that they aren't the answer to everything.

  For today's solution, I packed all of the logic into the =parse=
  function that extracts the data from the file. In =extract=, I use
  cl-ppcre to extract each of the numbers from the string. I also
  normalize the points such that x1 <= x2 and y1 <= y2. This
  normalization is sufficient for the first part, but not for the
  second. For the second part, I just checked all four cases for the
  loops, which is quite ugly.

  This code is also quite slow, even for the first part. I think I'll
  spend some time learning to profile Common Lisp code today and see
  if I can speed it up. Timing table for reference:

  | Part | Real Time (s) |
  |------+---------------|
  |    1 |        38.149 |
  |    2 |        38.029 |

  Before profiling, my guess is that the slowdown is due to
  =adjust-array=, which is probably resizing the array on nearly every
  iteration. If profiling shows that is the case, I may try something
  like Go's append, which doubles the dimensions each time to amortize
  the cost of resizing. The code is also quite deeply nested, so I may
  need to let =parse= actually just do the parsing and then do further
  manipulation in a separate loop. That would allow me to close the
  file earlier.

  #+begin_src lisp
    (defun extract (line)
      "take lines of the form \"0,9 -> 5,9\" and return a list of the four
      numbers"
      (normalize
       (mapcar #'read-from-string
	       (cdr
		(cl-ppcre:split
		 "(\\d+),(\\d+) -> (\\d+),(\\d+)" line
		 :with-registers-p t)))))

    (defun parse (filename &optional part2)
      (let ((grid (make-array '(1 1) :initial-element 0 :adjustable t)))
	(with-open-file (in filename)
	  (loop for line = (read-line in nil nil)
		while line
		do (destructuring-bind (x1 y1 x2 y2) (extract line)
		     (destructuring-bind (r c) (array-dimensions grid)
		       (let ((mx (max x1 x2))
			     (my (max y1 y2)))
			 (when (>= mx c) (setf c (1+ mx)))
			 (when (>= my r) (setf r (1+ my)))
			 (adjust-array grid (list r c))))
		     (cond
		       ((or (= x1 x2) (= y1 y2))
			(loop for x from x1 upto x2
			      do (loop for y from y1 upto y2
				       do (incf (aref grid y x)))))
		       ((and part2 (diag x1 y1 x2 y2))
			(if (> x1 x2)
			    (if (> y1 y2)
				(loop for x from x1 downto x2
				      and y from y1 downto y2
				      do (incf (aref grid y x)))
				(loop for x from x1 downto x2
				      and y from y1 upto y2
				      do (incf (aref grid y x))))
			    (if (> y1 y2)
				(loop for x from x1 upto x2
				      and y from y1 downto y2
				      do (incf (aref grid y x)))
				(loop for x from x1 upto x2
				      and y from y1 upto y2
				      do (incf (aref grid y x))))))))))
	grid))
  #+end_src

** Profiling
   Running =sb-sprof:with-profiling= didn't really give me what I
   wanted. As a result, I just started guessing where the problem was
   like I did before trying to profile.

   I also downloaded FiveAM for testing and added both parts running
   on both the example and the real input as tests. These results are
   below, followed by definitions of the labels in the "Iteration"
   column and the corresponding discussions.

  | Iteration            | Real Time (s) |
  |----------------------+---------------|
  | Original             |        75.413 |
  | Allocate double size |       143.139 |
  | Final                |         0.063 |

*** Original
    The original formulation shown above, used as a baseline.

*** Allocate double size
    Instead of using

      #+begin_src lisp
	(when (>= mx c) (setf c (1+ mx)))
	(when (>= my r) (setf r (1+ my)))
      #+end_src

      to adjust the size of the array, I tried

      #+begin_src lisp
	(when (>= mx c) (setf c (* 2 (1+ mx))))
	(when (>= my r) (setf r (* 2 (1+ my))))
      #+end_src

      in line with my first guess as to the problem above. Obviously
      this failed miserably, and I'm not quite sure why. This led me
      to go back to profiling. Again, the profile I got was very poor,
      probably because I wrote all of my logic in one function. To get
      a better profile, I started refactoring the code.

*** Final
    Well this is a bit embarrassing. By doing the parsing first,
    looping over the results once to determine the =max-x= and
    =max-y=, I totally removed resizing the array and made the program
    run instantaneously. I still didn't get the profiler to help me,
    but my thoughts about the allocations appear to have been
    correct. The refactor also helped to remove some of the deep
    nesting and the =destructuring-bind= calls. I also took advantage
    of the destructuring capability implicit in the =loop= macro, so
    now the only =destructuring-bind= is in =normalize=.

* Day 6
  As was probably intended, I thought today was very easy as I did
  part 1. The naive approach of maintaining a list of all the fish
  worked very easily for the first part, and I wrote a cute mapping
  loop to update the list of fish and just called it 80 times.

  #+begin_src lisp
    (defun event-loop (fish)
      (let ((new-fish '()))
	(append (mapcar #'(lambda (f)
			    (if (= 0 f)
				(progn
				  (push 8 new-fish)
				  6)
				(decf f)))
			fish)
		new-fish)))

    (defun part1 ()
      (loop for i from 0 upto 80
	    and fish = (parse "input.txt") then (event-loop fish)
	    do (format t "day ~a: ~a fish~%" i (length fish))))
  #+end_src

  Going up to 256 days, however, posed quite a problem for this
  approach. After blowing the heap with my naive implementation, I
  thought using a vector instead of a list would solve my issues, but
  this made it no farther than the list implementation. Finally I
  realized that all I really needed to do was keep track of the number
  of fish at each count. This let me go from a list of trillions of
  elements down to a list of 9 elements. My final solution is below. I
  left more of the work in the =parse= function this time, so I
  included that as well.

  #+begin_src lisp
    (defun parse2 (filename)
      (let ((ret (make-array 9
			     :element-type 'integer
			     :initial-element 0))
	    (fish
	      (with-open-file (in filename)
		(mapcar #'read-from-string (split "," (read-line in nil nil))))))
	(loop for f in fish
	      do (incf (aref ret f)))
	ret))

    (defun part2 ()
      ;; use subseq with setf to "rotate" part of the list
      (let ((fish (parse2 "input.txt")))
	(loop for i from 1 upto 256
	      and zero = (aref fish 0) then (aref fish 0)
	      do (setf (subseq fish 0 8) (subseq fish 1))
		 (setf (aref fish 8) zero)
		 (incf (aref fish 6) zero)
		 (format t "day ~a: ~a fish~%" i
			 (loop for f across fish
			       summing f)))))
  #+end_src
